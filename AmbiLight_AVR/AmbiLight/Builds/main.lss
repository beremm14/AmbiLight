
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000003ec  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000012e  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initIO>:
enum States state;

uint8_t switchPressed = 0;

void initIO(void) {
    DDRB |= (1<<PB0 | 1<<PB1 | 1<<PB2 | 1<<PB3 | 1<<PB4);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 61       	ori	r24, 0x1F	; 31
  94:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1<<PD3);
  96:	53 9a       	sbi	0x0a, 3	; 10
    PORTD |= (1<<PD2);
  98:	5a 9a       	sbi	0x0b, 2	; 11
    
    OCR2B = 0;
  9a:	10 92 b4 00 	sts	0x00B4, r1
    TCCR2A |= (1 << COM0A1);
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	80 83       	st	Z, r24
    TCCR2A |= (1 << WGM01) | (1 << WGM00);
  a8:	80 81       	ld	r24, Z
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS01);
  ae:	e1 eb       	ldi	r30, 0xB1	; 177
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	80 83       	st	Z, r24
    
    TCCR0A = (1<<CS01); //Prescaler 8
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	84 bd       	out	0x24, r24	; 36
    TIMSK0 |= (1<<TOIE0);
  bc:	ee e6       	ldi	r30, 0x6E	; 110
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
    
    EIMSK |= (1<<INT0);
  c6:	e8 9a       	sbi	0x1d, 0	; 29
    EICRA |= (1<<ISC01);
  c8:	e9 e6       	ldi	r30, 0x69	; 105
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
    
    state = OFF;
  d2:	10 92 09 01 	sts	0x0109, r1
    
    sei();
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <__vector_16>:
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	80 91 00 01 	lds	r24, 0x0100
  f0:	88 23       	and	r24, r24
  f2:	99 f0       	breq	.+38     	; 0x11a <__vector_16+0x40>
  f4:	80 91 05 01 	lds	r24, 0x0105
  f8:	90 91 06 01 	lds	r25, 0x0106
  fc:	a0 91 07 01 	lds	r26, 0x0107
 100:	b0 91 08 01 	lds	r27, 0x0108
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	a1 1d       	adc	r26, r1
 108:	b1 1d       	adc	r27, r1
 10a:	80 93 05 01 	sts	0x0105, r24
 10e:	90 93 06 01 	sts	0x0106, r25
 112:	a0 93 07 01 	sts	0x0107, r26
 116:	b0 93 08 01 	sts	0x0108, r27
 11a:	80 91 09 01 	lds	r24, 0x0109
 11e:	82 50       	subi	r24, 0x02	; 2
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	98 f4       	brcc	.+38     	; 0x14a <__vector_16+0x70>
 124:	80 91 01 01 	lds	r24, 0x0101
 128:	90 91 02 01 	lds	r25, 0x0102
 12c:	a0 91 03 01 	lds	r26, 0x0103
 130:	b0 91 04 01 	lds	r27, 0x0104
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	a1 1d       	adc	r26, r1
 138:	b1 1d       	adc	r27, r1
 13a:	80 93 01 01 	sts	0x0101, r24
 13e:	90 93 02 01 	sts	0x0102, r25
 142:	a0 93 03 01 	sts	0x0103, r26
 146:	b0 93 04 01 	sts	0x0104, r27
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:
}

int main(void) {
	initIO();
 15c:	0e 94 48 00 	call	0x90	; 0x90 <initIO>
            else if (state == T4)
                state = OFF;
            else if (state == OFF)
                state = ON;
        } else if (time >= 1000 && switchPressed == 1) {
            if (state != OFF && (time % 50) == 0)
 160:	82 e3       	ldi	r24, 0x32	; 50
 162:	c8 2e       	mov	r12, r24
 164:	d1 2c       	mov	r13, r1
 166:	e1 2c       	mov	r14, r1
 168:	f1 2c       	mov	r15, r1
                time_off = 0;
                break;
            case ON:
                PORTB |= (1<<PB0);
                if (OCR2B == 0)
                    OCR2B = 255;
 16a:	df ef       	ldi	r29, 0xFF	; 255

	while (1) {
        if ((PIND & (1<<PIND2)) == 0) {
            switchPressed = 0;
        } else {
            switchPressed = 1;
 16c:	c1 e0       	ldi	r28, 0x01	; 1
            else if (state == T1)
                state = T2;
            else if (state == T2)
                state = T3;
            else if (state == T3)
                state = T4;
 16e:	15 e0       	ldi	r17, 0x05	; 5
            if (state == ON)
                state = T1;
            else if (state == T1)
                state = T2;
            else if (state == T2)
                state = T3;
 170:	04 e0       	ldi	r16, 0x04	; 4
        
        if (time <= 1000 && time >= 50 && switchPressed == 0) { //under 2sec
            if (state == ON)
                state = T1;
            else if (state == T1)
                state = T2;
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	b9 2e       	mov	r11, r25
            switchPressed = 1;
        }
        
        if (time <= 1000 && time >= 50 && switchPressed == 0) { //under 2sec
            if (state == ON)
                state = T1;
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	a2 2e       	mov	r10, r18

int main(void) {
	initIO();

	while (1) {
        if ((PIND & (1<<PIND2)) == 0) {
 17a:	4a 99       	sbic	0x09, 2	; 9
 17c:	03 c0       	rjmp	.+6      	; 0x184 <main+0x28>
            switchPressed = 0;
 17e:	10 92 00 01 	sts	0x0100, r1
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x2c>
        } else {
            switchPressed = 1;
 184:	c0 93 00 01 	sts	0x0100, r28
        }
        
        if (time <= 1000 && time >= 50 && switchPressed == 0) { //under 2sec
 188:	60 91 05 01 	lds	r22, 0x0105
 18c:	70 91 06 01 	lds	r23, 0x0106
 190:	80 91 07 01 	lds	r24, 0x0107
 194:	90 91 08 01 	lds	r25, 0x0108
 198:	2b 01       	movw	r4, r22
 19a:	3c 01       	movw	r6, r24
 19c:	22 e3       	ldi	r18, 0x32	; 50
 19e:	42 1a       	sub	r4, r18
 1a0:	51 08       	sbc	r5, r1
 1a2:	61 08       	sbc	r6, r1
 1a4:	71 08       	sbc	r7, r1
 1a6:	20 91 09 01 	lds	r18, 0x0109
 1aa:	37 eb       	ldi	r19, 0xB7	; 183
 1ac:	43 16       	cp	r4, r19
 1ae:	33 e0       	ldi	r19, 0x03	; 3
 1b0:	53 06       	cpc	r5, r19
 1b2:	61 04       	cpc	r6, r1
 1b4:	71 04       	cpc	r7, r1
 1b6:	10 f5       	brcc	.+68     	; 0x1fc <main+0xa0>
 1b8:	30 91 00 01 	lds	r19, 0x0100
 1bc:	31 11       	cpse	r19, r1
 1be:	1e c0       	rjmp	.+60     	; 0x1fc <main+0xa0>
            if (state == ON)
 1c0:	21 30       	cpi	r18, 0x01	; 1
 1c2:	19 f4       	brne	.+6      	; 0x1ca <main+0x6e>
                state = T1;
 1c4:	a0 92 09 01 	sts	0x0109, r10
 1c8:	32 c0       	rjmp	.+100    	; 0x22e <main+0xd2>
            else if (state == T1)
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <main+0x78>
                state = T2;
 1ce:	b0 92 09 01 	sts	0x0109, r11
 1d2:	2d c0       	rjmp	.+90     	; 0x22e <main+0xd2>
            else if (state == T2)
 1d4:	23 30       	cpi	r18, 0x03	; 3
 1d6:	19 f4       	brne	.+6      	; 0x1de <main+0x82>
                state = T3;
 1d8:	00 93 09 01 	sts	0x0109, r16
 1dc:	28 c0       	rjmp	.+80     	; 0x22e <main+0xd2>
            else if (state == T3)
 1de:	24 30       	cpi	r18, 0x04	; 4
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <main+0x8c>
                state = T4;
 1e2:	10 93 09 01 	sts	0x0109, r17
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <main+0xd2>
            else if (state == T4)
 1e8:	25 30       	cpi	r18, 0x05	; 5
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <main+0x96>
                state = OFF;
 1ec:	10 92 09 01 	sts	0x0109, r1
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <main+0xd2>
            else if (state == OFF)
 1f2:	21 11       	cpse	r18, r1
 1f4:	1c c0       	rjmp	.+56     	; 0x22e <main+0xd2>
                state = ON;
 1f6:	c0 93 09 01 	sts	0x0109, r28
 1fa:	19 c0       	rjmp	.+50     	; 0x22e <main+0xd2>
        } else if (time >= 1000 && switchPressed == 1) {
 1fc:	68 3e       	cpi	r22, 0xE8	; 232
 1fe:	33 e0       	ldi	r19, 0x03	; 3
 200:	73 07       	cpc	r23, r19
 202:	81 05       	cpc	r24, r1
 204:	91 05       	cpc	r25, r1
 206:	98 f0       	brcs	.+38     	; 0x22e <main+0xd2>
 208:	30 91 00 01 	lds	r19, 0x0100
 20c:	31 30       	cpi	r19, 0x01	; 1
 20e:	79 f4       	brne	.+30     	; 0x22e <main+0xd2>
            if (state != OFF && (time % 50) == 0)
 210:	22 23       	and	r18, r18
 212:	69 f0       	breq	.+26     	; 0x22e <main+0xd2>
 214:	a7 01       	movw	r20, r14
 216:	96 01       	movw	r18, r12
 218:	0e 94 88 01 	call	0x310	; 0x310 <__udivmodsi4>
 21c:	67 2b       	or	r22, r23
 21e:	68 2b       	or	r22, r24
 220:	69 2b       	or	r22, r25
 222:	29 f4       	brne	.+10     	; 0x22e <main+0xd2>
                OCR2B--;
 224:	80 91 b4 00 	lds	r24, 0x00B4
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	80 93 b4 00 	sts	0x00B4, r24
        }
        
        switch (state) {
 22e:	80 91 09 01 	lds	r24, 0x0109
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	19 f1       	breq	.+70     	; 0x27c <main+0x120>
 236:	28 f4       	brcc	.+10     	; 0x242 <main+0xe6>
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <main+0xf4>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	71 f0       	breq	.+28     	; 0x25c <main+0x100>
 240:	5a c0       	rjmp	.+180    	; 0x2f6 <main+0x19a>
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	c9 f1       	breq	.+114    	; 0x2b8 <main+0x15c>
 246:	48 f1       	brcs	.+82     	; 0x29a <main+0x13e>
 248:	85 30       	cpi	r24, 0x05	; 5
 24a:	09 f4       	brne	.+2      	; 0x24e <main+0xf2>
 24c:	44 c0       	rjmp	.+136    	; 0x2d6 <main+0x17a>
 24e:	53 c0       	rjmp	.+166    	; 0x2f6 <main+0x19a>
            case OFF:
                PORTB &= ~(1<<PB0 | 1<<PB1 | 1<<PB2 | 1<<PB3 | 1<<PB4);
 250:	85 b1       	in	r24, 0x05	; 5
 252:	80 7e       	andi	r24, 0xE0	; 224
 254:	85 b9       	out	0x05, r24	; 5
                OCR2B = 0;
 256:	10 92 b4 00 	sts	0x00B4, r1
 25a:	07 c0       	rjmp	.+14     	; 0x26a <main+0x10e>
                time_off = 0;
                break;
            case ON:
                PORTB |= (1<<PB0);
 25c:	28 9a       	sbi	0x05, 0	; 5
                if (OCR2B == 0)
 25e:	80 91 b4 00 	lds	r24, 0x00B4
 262:	81 11       	cpse	r24, r1
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x10e>
                    OCR2B = 255;
 266:	d0 93 b4 00 	sts	0x00B4, r29
                time_off = 0;
 26a:	10 92 01 01 	sts	0x0101, r1
 26e:	10 92 02 01 	sts	0x0102, r1
 272:	10 92 03 01 	sts	0x0103, r1
 276:	10 92 04 01 	sts	0x0104, r1
                break;
 27a:	3d c0       	rjmp	.+122    	; 0x2f6 <main+0x19a>
            case T1:
                PORTB |= (1<<PB1);
 27c:	29 9a       	sbi	0x05, 1	; 5
                if (time_off > 1800000) {
 27e:	80 91 01 01 	lds	r24, 0x0101
 282:	90 91 02 01 	lds	r25, 0x0102
 286:	a0 91 03 01 	lds	r26, 0x0103
 28a:	b0 91 04 01 	lds	r27, 0x0104
 28e:	81 34       	cpi	r24, 0x41	; 65
 290:	97 47       	sbci	r25, 0x77	; 119
 292:	ab 41       	sbci	r26, 0x1B	; 27
 294:	b1 05       	cpc	r27, r1
 296:	78 f1       	brcs	.+94     	; 0x2f6 <main+0x19a>
 298:	2c c0       	rjmp	.+88     	; 0x2f2 <main+0x196>
                    state = OFF;
                }
                break;
            case T2:
                PORTB |= (1<<PB2);
 29a:	2a 9a       	sbi	0x05, 2	; 5
                if (time_off > 3600000) {
 29c:	80 91 01 01 	lds	r24, 0x0101
 2a0:	90 91 02 01 	lds	r25, 0x0102
 2a4:	a0 91 03 01 	lds	r26, 0x0103
 2a8:	b0 91 04 01 	lds	r27, 0x0104
 2ac:	81 38       	cpi	r24, 0x81	; 129
 2ae:	9e 4e       	sbci	r25, 0xEE	; 238
 2b0:	a6 43       	sbci	r26, 0x36	; 54
 2b2:	b1 05       	cpc	r27, r1
 2b4:	00 f1       	brcs	.+64     	; 0x2f6 <main+0x19a>
 2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <main+0x196>
                    state = OFF;
                }
                break;
            case T3:
                PORTB |= (1<<PB3);
 2b8:	2b 9a       	sbi	0x05, 3	; 5
                if (time_off > 5400000) {
 2ba:	80 91 01 01 	lds	r24, 0x0101
 2be:	90 91 02 01 	lds	r25, 0x0102
 2c2:	a0 91 03 01 	lds	r26, 0x0103
 2c6:	b0 91 04 01 	lds	r27, 0x0104
 2ca:	81 3c       	cpi	r24, 0xC1	; 193
 2cc:	95 46       	sbci	r25, 0x65	; 101
 2ce:	a2 45       	sbci	r26, 0x52	; 82
 2d0:	b1 05       	cpc	r27, r1
 2d2:	88 f0       	brcs	.+34     	; 0x2f6 <main+0x19a>
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <main+0x196>
                    state = OFF;
                }
                break;
            case T4:
                PORTB |= (1<<PB4);
 2d6:	2c 9a       	sbi	0x05, 4	; 5
                if (time_off > 7200000) {
 2d8:	80 91 01 01 	lds	r24, 0x0101
 2dc:	90 91 02 01 	lds	r25, 0x0102
 2e0:	a0 91 03 01 	lds	r26, 0x0103
 2e4:	b0 91 04 01 	lds	r27, 0x0104
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	9d 4d       	sbci	r25, 0xDD	; 221
 2ec:	ad 46       	sbci	r26, 0x6D	; 109
 2ee:	b1 05       	cpc	r27, r1
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <main+0x19a>
                    state = OFF;
 2f2:	10 92 09 01 	sts	0x0109, r1
                }
                break;
        }
        
        if (switchPressed == 0) {
 2f6:	80 91 00 01 	lds	r24, 0x0100
 2fa:	81 11       	cpse	r24, r1
 2fc:	3e cf       	rjmp	.-388    	; 0x17a <main+0x1e>
            time = 0;
 2fe:	10 92 05 01 	sts	0x0105, r1
 302:	10 92 06 01 	sts	0x0106, r1
 306:	10 92 07 01 	sts	0x0107, r1
 30a:	10 92 08 01 	sts	0x0108, r1
 30e:	35 cf       	rjmp	.-406    	; 0x17a <main+0x1e>

00000310 <__udivmodsi4>:
 310:	a1 e2       	ldi	r26, 0x21	; 33
 312:	1a 2e       	mov	r1, r26
 314:	aa 1b       	sub	r26, r26
 316:	bb 1b       	sub	r27, r27
 318:	fd 01       	movw	r30, r26
 31a:	0d c0       	rjmp	.+26     	; 0x336 <__udivmodsi4_ep>

0000031c <__udivmodsi4_loop>:
 31c:	aa 1f       	adc	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	ee 1f       	adc	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	a2 17       	cp	r26, r18
 326:	b3 07       	cpc	r27, r19
 328:	e4 07       	cpc	r30, r20
 32a:	f5 07       	cpc	r31, r21
 32c:	20 f0       	brcs	.+8      	; 0x336 <__udivmodsi4_ep>
 32e:	a2 1b       	sub	r26, r18
 330:	b3 0b       	sbc	r27, r19
 332:	e4 0b       	sbc	r30, r20
 334:	f5 0b       	sbc	r31, r21

00000336 <__udivmodsi4_ep>:
 336:	66 1f       	adc	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	88 1f       	adc	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	1a 94       	dec	r1
 340:	69 f7       	brne	.-38     	; 0x31c <__udivmodsi4_loop>
 342:	60 95       	com	r22
 344:	70 95       	com	r23
 346:	80 95       	com	r24
 348:	90 95       	com	r25
 34a:	9b 01       	movw	r18, r22
 34c:	ac 01       	movw	r20, r24
 34e:	bd 01       	movw	r22, r26
 350:	cf 01       	movw	r24, r30
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
